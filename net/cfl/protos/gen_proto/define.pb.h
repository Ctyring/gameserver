// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: define.proto
// Protobuf C++ Version: 5.29.5

#ifndef define_2eproto_2epb_2eh
#define define_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_define_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_define_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_define_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum ObjectType : int {
  object_none = 0,
  object_player = 1,
  object_npc = 2,
  object_monster = 3,
  object_pet = 4,
  object_mount = 5,
  object_machine = 6,
  object_partner = 7,
  object_summon = 8,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ObjectType_IsValid(int value);
extern const uint32_t ObjectType_internal_data_[];
constexpr ObjectType ObjectType_MIN = static_cast<ObjectType>(0);
constexpr ObjectType ObjectType_MAX = static_cast<ObjectType>(8);
constexpr int ObjectType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
ObjectType_descriptor();
template <typename T>
const std::string& ObjectType_Name(T value) {
  static_assert(std::is_same<T, ObjectType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ObjectType_Name().");
  return ObjectType_Name(static_cast<ObjectType>(value));
}
template <>
inline const std::string& ObjectType_Name(ObjectType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ObjectType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool ObjectType_Parse(absl::string_view name, ObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectType>(
      ObjectType_descriptor(), name, value);
}
enum ActionType : int {
  action_none = 0,
  action_idle = 1,
  action_fix_body = 2,
  action_walk = 3,
  action_run = 4,
  action_fly = 5,
  action_skill = 6,
  action_mine = 7,
  action_roll = 8,
  action_jump = 9,
  action_born = 10,
  action_dance = 11,
  action_dead = 12,
  action_wound = 13,
  action_beat_back = 14,
  action_beat_down = 15,
  action_beat_fly = 16,
  ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ActionType_IsValid(int value);
extern const uint32_t ActionType_internal_data_[];
constexpr ActionType ActionType_MIN = static_cast<ActionType>(0);
constexpr ActionType ActionType_MAX = static_cast<ActionType>(16);
constexpr int ActionType_ARRAYSIZE = 16 + 1;
const ::google::protobuf::EnumDescriptor*
ActionType_descriptor();
template <typename T>
const std::string& ActionType_Name(T value) {
  static_assert(std::is_same<T, ActionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ActionType_Name().");
  return ActionType_Name(static_cast<ActionType>(value));
}
template <>
inline const std::string& ActionType_Name(ActionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ActionType_descriptor,
                                                 0, 16>(
      static_cast<int>(value));
}
inline bool ActionType_Parse(absl::string_view name, ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionType>(
      ActionType_descriptor(), name, value);
}
enum ActionStatus : int {
  action_status_none = 0,
  action_status_hurt = 1,
  action_status_start = 2,
  action_status_end = 268435455,
  ActionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ActionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ActionStatus_IsValid(int value);
extern const uint32_t ActionStatus_internal_data_[];
constexpr ActionStatus ActionStatus_MIN = static_cast<ActionStatus>(0);
constexpr ActionStatus ActionStatus_MAX = static_cast<ActionStatus>(268435455);
constexpr int ActionStatus_ARRAYSIZE = 268435455 + 1;
const ::google::protobuf::EnumDescriptor*
ActionStatus_descriptor();
template <typename T>
const std::string& ActionStatus_Name(T value) {
  static_assert(std::is_same<T, ActionStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ActionStatus_Name().");
  return ::google::protobuf::internal::NameOfEnum(ActionStatus_descriptor(), value);
}
inline bool ActionStatus_Parse(absl::string_view name, ActionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionStatus>(
      ActionStatus_descriptor(), name, value);
}
enum CopyType : int {
  copy_none = 0,
  copy_login = 1,
  copy_sel_role = 2,
  copy_city = 3,
  copy_main = 4,
  copy_world = 5,
  copy_end = 100,
  CopyType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CopyType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CopyType_IsValid(int value);
extern const uint32_t CopyType_internal_data_[];
constexpr CopyType CopyType_MIN = static_cast<CopyType>(0);
constexpr CopyType CopyType_MAX = static_cast<CopyType>(100);
constexpr int CopyType_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor*
CopyType_descriptor();
template <typename T>
const std::string& CopyType_Name(T value) {
  static_assert(std::is_same<T, CopyType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CopyType_Name().");
  return ::google::protobuf::internal::NameOfEnum(CopyType_descriptor(), value);
}
inline bool CopyType_Parse(absl::string_view name, CopyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CopyType>(
      CopyType_descriptor(), name, value);
}
enum ObjectStatus : int {
  status_none = 0,
  status_dead = 1,
  status_not_move = 2,
  status_not_cast = 3,
  status_not_be_hurt = 4,
  status_not_be_control = 5,
  status_stealth = 6,
  status_blind = 7,
  ObjectStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ObjectStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ObjectStatus_IsValid(int value);
extern const uint32_t ObjectStatus_internal_data_[];
constexpr ObjectStatus ObjectStatus_MIN = static_cast<ObjectStatus>(0);
constexpr ObjectStatus ObjectStatus_MAX = static_cast<ObjectStatus>(7);
constexpr int ObjectStatus_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
ObjectStatus_descriptor();
template <typename T>
const std::string& ObjectStatus_Name(T value) {
  static_assert(std::is_same<T, ObjectStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ObjectStatus_Name().");
  return ObjectStatus_Name(static_cast<ObjectStatus>(value));
}
template <>
inline const std::string& ObjectStatus_Name(ObjectStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ObjectStatus_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool ObjectStatus_Parse(absl::string_view name, ObjectStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectStatus>(
      ObjectStatus_descriptor(), name, value);
}
enum ItemType : int {
  item_none = 0,
  item_money = 1,
  item_action = 2,
  item_item = 3,
  item_equip = 4,
  item_gem = 5,
  item_relics = 6,
  item_mount = 7,
  item_pet = 8,
  item_partner = 9,
  item_fashion = 10,
  item_box = 11,
  item_act_box = 12,
  item_chip = 13,
  item_rune = 14,
  item_drug = 15,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ItemType_IsValid(int value);
extern const uint32_t ItemType_internal_data_[];
constexpr ItemType ItemType_MIN = static_cast<ItemType>(0);
constexpr ItemType ItemType_MAX = static_cast<ItemType>(15);
constexpr int ItemType_ARRAYSIZE = 15 + 1;
const ::google::protobuf::EnumDescriptor*
ItemType_descriptor();
template <typename T>
const std::string& ItemType_Name(T value) {
  static_assert(std::is_same<T, ItemType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ItemType_Name().");
  return ItemType_Name(static_cast<ItemType>(value));
}
template <>
inline const std::string& ItemType_Name(ItemType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ItemType_descriptor,
                                                 0, 15>(
      static_cast<int>(value));
}
inline bool ItemType_Parse(absl::string_view name, ItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemType>(
      ItemType_descriptor(), name, value);
}
enum BagType : int {
  bag_none = 0,
  bag_item = 1,
  bag_gem = 2,
  bag_fashion = 3,
  bag_chip = 4,
  bag_rune = 5,
  bag_task = 6,
  bag_soul = 7,
  bag_card = 8,
  BagType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BagType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BagType_IsValid(int value);
extern const uint32_t BagType_internal_data_[];
constexpr BagType BagType_MIN = static_cast<BagType>(0);
constexpr BagType BagType_MAX = static_cast<BagType>(8);
constexpr int BagType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
BagType_descriptor();
template <typename T>
const std::string& BagType_Name(T value) {
  static_assert(std::is_same<T, BagType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BagType_Name().");
  return BagType_Name(static_cast<BagType>(value));
}
template <>
inline const std::string& BagType_Name(BagType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BagType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool BagType_Parse(absl::string_view name, BagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BagType>(
      BagType_descriptor(), name, value);
}
enum FunctionType : int {
  func_begin_id = 0,
  func_end_id = 150,
  FunctionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FunctionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FunctionType_IsValid(int value);
extern const uint32_t FunctionType_internal_data_[];
constexpr FunctionType FunctionType_MIN = static_cast<FunctionType>(0);
constexpr FunctionType FunctionType_MAX = static_cast<FunctionType>(150);
constexpr int FunctionType_ARRAYSIZE = 150 + 1;
const ::google::protobuf::EnumDescriptor*
FunctionType_descriptor();
template <typename T>
const std::string& FunctionType_Name(T value) {
  static_assert(std::is_same<T, FunctionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FunctionType_Name().");
  return ::google::protobuf::internal::NameOfEnum(FunctionType_descriptor(), value);
}
inline bool FunctionType_Parse(absl::string_view name, FunctionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunctionType>(
      FunctionType_descriptor(), name, value);
}
enum AttrId : int {
  attr_hp = 0,
  attr_mp = 1,
  attr_hp_max = 2,
  attr_mp_max = 3,
  attr_speed = 4,
  attr_attack = 5,
  attr_element = 6,
  attr_magic_def = 7,
  attr_physic_def = 8,
  attr_hit_rate = 9,
  attr_dodge = 10,
  attr_more_hurt = 11,
  attr_less_hurt = 12,
  attr_crit_hit = 13,
  attr_crit_def = 14,
  attr_crit_hurt = 15,
  attr_num = 16,
  AttrId_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AttrId_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AttrId_IsValid(int value);
extern const uint32_t AttrId_internal_data_[];
constexpr AttrId AttrId_MIN = static_cast<AttrId>(0);
constexpr AttrId AttrId_MAX = static_cast<AttrId>(16);
constexpr int AttrId_ARRAYSIZE = 16 + 1;
const ::google::protobuf::EnumDescriptor*
AttrId_descriptor();
template <typename T>
const std::string& AttrId_Name(T value) {
  static_assert(std::is_same<T, AttrId>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AttrId_Name().");
  return AttrId_Name(static_cast<AttrId>(value));
}
template <>
inline const std::string& AttrId_Name(AttrId value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AttrId_descriptor,
                                                 0, 16>(
      static_cast<int>(value));
}
inline bool AttrId_Parse(absl::string_view name, AttrId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttrId>(
      AttrId_descriptor(), name, value);
}
enum ShipRelation : int {
  ship_neutral = 0,
  ship_friend = 1,
  ship_enemy = 2,
  ShipRelation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ShipRelation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ShipRelation_IsValid(int value);
extern const uint32_t ShipRelation_internal_data_[];
constexpr ShipRelation ShipRelation_MIN = static_cast<ShipRelation>(0);
constexpr ShipRelation ShipRelation_MAX = static_cast<ShipRelation>(2);
constexpr int ShipRelation_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ShipRelation_descriptor();
template <typename T>
const std::string& ShipRelation_Name(T value) {
  static_assert(std::is_same<T, ShipRelation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ShipRelation_Name().");
  return ShipRelation_Name(static_cast<ShipRelation>(value));
}
template <>
inline const std::string& ShipRelation_Name(ShipRelation value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ShipRelation_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ShipRelation_Parse(absl::string_view name, ShipRelation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShipRelation>(
      ShipRelation_descriptor(), name, value);
}
enum HitShipType : int {
  hit_all = 0,
  hit_friend = 1,
  hit_enemy = 2,
  HitShipType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HitShipType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HitShipType_IsValid(int value);
extern const uint32_t HitShipType_internal_data_[];
constexpr HitShipType HitShipType_MIN = static_cast<HitShipType>(0);
constexpr HitShipType HitShipType_MAX = static_cast<HitShipType>(2);
constexpr int HitShipType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
HitShipType_descriptor();
template <typename T>
const std::string& HitShipType_Name(T value) {
  static_assert(std::is_same<T, HitShipType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to HitShipType_Name().");
  return HitShipType_Name(static_cast<HitShipType>(value));
}
template <>
inline const std::string& HitShipType_Name(HitShipType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HitShipType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool HitShipType_Parse(absl::string_view name, HitShipType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HitShipType>(
      HitShipType_descriptor(), name, value);
}
enum BuffType : int {
  buff_none = 0,
  BuffType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BuffType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BuffType_IsValid(int value);
extern const uint32_t BuffType_internal_data_[];
constexpr BuffType BuffType_MIN = static_cast<BuffType>(0);
constexpr BuffType BuffType_MAX = static_cast<BuffType>(0);
constexpr int BuffType_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
BuffType_descriptor();
template <typename T>
const std::string& BuffType_Name(T value) {
  static_assert(std::is_same<T, BuffType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BuffType_Name().");
  return BuffType_Name(static_cast<BuffType>(value));
}
template <>
inline const std::string& BuffType_Name(BuffType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BuffType_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool BuffType_Parse(absl::string_view name, BuffType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BuffType>(
      BuffType_descriptor(), name, value);
}
enum ChatChannel : int {
  chat_none = 0,
  chat_world = 1,
  chat_private = 2,
  chat_guild = 3,
  chat_roll_tip = 4,
  ChatChannel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ChatChannel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ChatChannel_IsValid(int value);
extern const uint32_t ChatChannel_internal_data_[];
constexpr ChatChannel ChatChannel_MIN = static_cast<ChatChannel>(0);
constexpr ChatChannel ChatChannel_MAX = static_cast<ChatChannel>(4);
constexpr int ChatChannel_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ChatChannel_descriptor();
template <typename T>
const std::string& ChatChannel_Name(T value) {
  static_assert(std::is_same<T, ChatChannel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ChatChannel_Name().");
  return ChatChannel_Name(static_cast<ChatChannel>(value));
}
template <>
inline const std::string& ChatChannel_Name(ChatChannel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ChatChannel_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ChatChannel_Parse(absl::string_view name, ChatChannel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatChannel>(
      ChatChannel_descriptor(), name, value);
}
enum EquipPos : int {
  equip_none = 0,
  equip_helmet = 1,
  equip_necklace = 2,
  equip_armor = 3,
  equip_shoes = 4,
  equip_wrist = 5,
  equip_ring = 6,
  equip_talisman = 7,
  equip_weapon = 8,
  EquipPos_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EquipPos_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EquipPos_IsValid(int value);
extern const uint32_t EquipPos_internal_data_[];
constexpr EquipPos EquipPos_MIN = static_cast<EquipPos>(0);
constexpr EquipPos EquipPos_MAX = static_cast<EquipPos>(8);
constexpr int EquipPos_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
EquipPos_descriptor();
template <typename T>
const std::string& EquipPos_Name(T value) {
  static_assert(std::is_same<T, EquipPos>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EquipPos_Name().");
  return EquipPos_Name(static_cast<EquipPos>(value));
}
template <>
inline const std::string& EquipPos_Name(EquipPos value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EquipPos_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool EquipPos_Parse(absl::string_view name, EquipPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipPos>(
      EquipPos_descriptor(), name, value);
}
enum TaskStatus : int {
  task_init = 0,
  task_accept = 1,
  task_finish = 2,
  task_commit = 3,
  TaskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TaskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TaskStatus_IsValid(int value);
extern const uint32_t TaskStatus_internal_data_[];
constexpr TaskStatus TaskStatus_MIN = static_cast<TaskStatus>(0);
constexpr TaskStatus TaskStatus_MAX = static_cast<TaskStatus>(3);
constexpr int TaskStatus_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TaskStatus_descriptor();
template <typename T>
const std::string& TaskStatus_Name(T value) {
  static_assert(std::is_same<T, TaskStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TaskStatus_Name().");
  return TaskStatus_Name(static_cast<TaskStatus>(value));
}
template <>
inline const std::string& TaskStatus_Name(TaskStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TaskStatus_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TaskStatus_Parse(absl::string_view name, TaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskStatus>(
      TaskStatus_descriptor(), name, value);
}
enum CopyResult : int {
  copy_none_result = 0,
  copy_win = 1,
  copy_lost = 2,
  copy_draw = 3,
  CopyResult_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CopyResult_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CopyResult_IsValid(int value);
extern const uint32_t CopyResult_internal_data_[];
constexpr CopyResult CopyResult_MIN = static_cast<CopyResult>(0);
constexpr CopyResult CopyResult_MAX = static_cast<CopyResult>(3);
constexpr int CopyResult_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
CopyResult_descriptor();
template <typename T>
const std::string& CopyResult_Name(T value) {
  static_assert(std::is_same<T, CopyResult>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CopyResult_Name().");
  return CopyResult_Name(static_cast<CopyResult>(value));
}
template <>
inline const std::string& CopyResult_Name(CopyResult value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CopyResult_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool CopyResult_Parse(absl::string_view name, CopyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CopyResult>(
      CopyResult_descriptor(), name, value);
}
enum GuildPos : int {
  guild_member = 0,
  guild_leader = 1,
  guild_vice_leader = 2,
  GuildPos_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GuildPos_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GuildPos_IsValid(int value);
extern const uint32_t GuildPos_internal_data_[];
constexpr GuildPos GuildPos_MIN = static_cast<GuildPos>(0);
constexpr GuildPos GuildPos_MAX = static_cast<GuildPos>(2);
constexpr int GuildPos_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
GuildPos_descriptor();
template <typename T>
const std::string& GuildPos_Name(T value) {
  static_assert(std::is_same<T, GuildPos>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GuildPos_Name().");
  return GuildPos_Name(static_cast<GuildPos>(value));
}
template <>
inline const std::string& GuildPos_Name(GuildPos value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GuildPos_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool GuildPos_Parse(absl::string_view name, GuildPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuildPos>(
      GuildPos_descriptor(), name, value);
}
enum MailType : int {
  mail_begin = 0,
  mail_custom = 1,
  MailType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MailType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MailType_IsValid(int value);
extern const uint32_t MailType_internal_data_[];
constexpr MailType MailType_MIN = static_cast<MailType>(0);
constexpr MailType MailType_MAX = static_cast<MailType>(1);
constexpr int MailType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
MailType_descriptor();
template <typename T>
const std::string& MailType_Name(T value) {
  static_assert(std::is_same<T, MailType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MailType_Name().");
  return MailType_Name(static_cast<MailType>(value));
}
template <>
inline const std::string& MailType_Name(MailType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MailType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool MailType_Parse(absl::string_view name, MailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MailType>(
      MailType_descriptor(), name, value);
}
enum MailStatus : int {
  mail_new = 0,
  mail_received = 1,
  MailStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MailStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MailStatus_IsValid(int value);
extern const uint32_t MailStatus_internal_data_[];
constexpr MailStatus MailStatus_MIN = static_cast<MailStatus>(0);
constexpr MailStatus MailStatus_MAX = static_cast<MailStatus>(1);
constexpr int MailStatus_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
MailStatus_descriptor();
template <typename T>
const std::string& MailStatus_Name(T value) {
  static_assert(std::is_same<T, MailStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MailStatus_Name().");
  return MailStatus_Name(static_cast<MailStatus>(value));
}
template <>
inline const std::string& MailStatus_Name(MailStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MailStatus_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool MailStatus_Parse(absl::string_view name, MailStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MailStatus>(
      MailStatus_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ObjectType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ObjectType>() {
  return ::ObjectType_descriptor();
}
template <>
struct is_proto_enum<::ActionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ActionType>() {
  return ::ActionType_descriptor();
}
template <>
struct is_proto_enum<::ActionStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ActionStatus>() {
  return ::ActionStatus_descriptor();
}
template <>
struct is_proto_enum<::CopyType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CopyType>() {
  return ::CopyType_descriptor();
}
template <>
struct is_proto_enum<::ObjectStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ObjectStatus>() {
  return ::ObjectStatus_descriptor();
}
template <>
struct is_proto_enum<::ItemType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ItemType>() {
  return ::ItemType_descriptor();
}
template <>
struct is_proto_enum<::BagType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::BagType>() {
  return ::BagType_descriptor();
}
template <>
struct is_proto_enum<::FunctionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::FunctionType>() {
  return ::FunctionType_descriptor();
}
template <>
struct is_proto_enum<::AttrId> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::AttrId>() {
  return ::AttrId_descriptor();
}
template <>
struct is_proto_enum<::ShipRelation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ShipRelation>() {
  return ::ShipRelation_descriptor();
}
template <>
struct is_proto_enum<::HitShipType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::HitShipType>() {
  return ::HitShipType_descriptor();
}
template <>
struct is_proto_enum<::BuffType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::BuffType>() {
  return ::BuffType_descriptor();
}
template <>
struct is_proto_enum<::ChatChannel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ChatChannel>() {
  return ::ChatChannel_descriptor();
}
template <>
struct is_proto_enum<::EquipPos> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::EquipPos>() {
  return ::EquipPos_descriptor();
}
template <>
struct is_proto_enum<::TaskStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TaskStatus>() {
  return ::TaskStatus_descriptor();
}
template <>
struct is_proto_enum<::CopyResult> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CopyResult>() {
  return ::CopyResult_descriptor();
}
template <>
struct is_proto_enum<::GuildPos> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::GuildPos>() {
  return ::GuildPos_descriptor();
}
template <>
struct is_proto_enum<::MailType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::MailType>() {
  return ::MailType_descriptor();
}
template <>
struct is_proto_enum<::MailStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::MailStatus>() {
  return ::MailStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // define_2eproto_2epb_2eh
